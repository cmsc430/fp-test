#lang racket
'(lparen (id . "begin") lparen (id . "define") lparen (id . "read-chars") rparen lparen (id . "let") lparen lparen (id . "c") lparen (id . "read-char") rparen rparen rparen lparen (id . "if") lparen (id . "eof-object?") (id . "c") rparen quote lparen rparen lparen (id . "cons") (id . "c") lparen (id . "read-chars") rparen rparen rparen rparen rparen lparen (id . "define") lparen (id . "parse-prog") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\# lparen (id . "cons") #\l lparen (id . "cons") #\a lparen (id . "cons") #\n lparen (id . "cons") #\g lparen (id . "cons") #\s (id . "pace") lparen (id . "cons") #\r lparen (id . "cons") #\a lparen (id . "cons") #\c lparen (id . "cons") #\k lparen (id . "cons") #\e lparen (id . "cons") #\t lparen (id . "cons") #\newline (id . "loc") rparen rparen rparen rparen rparen rparen rparen rparen rparen rparen rparen rparen rparen lparen (id . "parse-token*") (id . "loc") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-token*") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket quote lparen rparen quote lparen rparen rbracket lbracket lparen (id . "cons") lparen (id . "?") (id . "whitespace?") rparen (id . "loc") rparen lparen (id . "parse-token*") (id . "loc") rparen rbracket lbracket lparen (id . "cons") #\; (id . "loc") rparen lparen (id . "match") lparen (id . "parse-comment") (id . "loc") rparen lbracket (id . "loc") lparen (id . "parse-token*") (id . "loc") rparen rbracket rparen rbracket lbracket (id . "_") lparen (id . "match") lparen (id . "parse-token") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "t") rparen lparen (id . "cons") (id . "t") lparen (id . "parse-token*") (id . "loc") rparen rparen rbracket rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-comment") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket quote lparen rparen quote lparen rparen rbracket lbracket lparen (id . "cons") #\newline (id . "loc") rparen (id . "loc") rbracket lbracket lparen (id . "cons") (id . "_") (id . "loc") rparen lparen (id . "parse-comment") (id . "loc") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "whitespace?") (id . "c") rparen lparen (id . "memq") (id . "c") quote lparen #\s (id . "pace") #\tab #\newline #\return rparen rparen rparen lparen (id . "define") lparen (id . "parse-token") (id . "loc") rparen lparen (id . "cond") lbracket lparen (id . "first-identifier?") (id . "loc") rparen lparen (id . "parse-identifier") (id . "loc") rparen rbracket lbracket lparen (id . "first-boolean?") (id . "loc") rparen lparen (id . "parse-boolean") (id . "loc") rparen rbracket lbracket lparen (id . "first-number?") (id . "loc") rparen lparen (id . "parse-number") (id . "loc") rparen rbracket lbracket lparen (id . "first-character?") (id . "loc") rparen lparen (id . "parse-character") (id . "loc") rparen rbracket lbracket lparen (id . "first-string?") (id . "loc") rparen lparen (id . "parse-string") (id . "loc") rparen rbracket lbracket (id . "else") lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\( (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "lparen") rparen rbracket lbracket lparen (id . "cons") #\[ (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "lbracket") rparen rbracket lbracket lparen (id . "cons") #\) (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "rparen") rparen rbracket lbracket lparen (id . "cons") #\] (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "rbracket") rparen rbracket lbracket lparen (id . "cons") #\' (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "quote") rparen rbracket lbracket lparen (id . "cons") #\. (id . "loc") rparen lparen (id . "cons") (id . "loc") quote (id . "dot") rparen rbracket rparen rbracket rparen rparen lparen (id . "define") lparen (id . "first-identifier?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "letter?") rparen (id . "_") rparen #t rbracket lbracket lparen (id . "cons") lparen (id . "?") (id . "special-initial?") rparen (id . "_") rparen #t rbracket lbracket lparen (id . "cons") #\+ (id . "_") rparen #t rbracket lbracket lparen (id . "cons") #\- (id . "_") rparen #t rbracket lbracket lparen (id . "cons") #\. lparen (id . "cons") #\. lparen (id . "cons") #\. (id . "_") rparen rparen rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "first-boolean?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\# lparen (id . "cons") #\t (id . "_") rparen rparen #t rbracket lbracket lparen (id . "cons") #\# lparen (id . "cons") #\f (id . "_") rparen rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "first-number?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "digit?") rparen (id . "_") rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "first-character?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\# lparen (id . "cons") #\\ (id . "_") rparen rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "first-string?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\" (id . "_") rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "parse-identifier") (id . "loc") rparen lparen (id . "cond") lbracket lparen (id . "first-initial?") (id . "loc") rparen lparen (id . "match") lparen (id . "parse-initial") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "init") rparen lparen (id . "match") lparen (id . "parse-subsequent*") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "subs") rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") quote (id . "id") lparen (id . "list->string") lparen (id . "cons") (id . "init") (id . "subs") rparen rparen rparen rparen rbracket rparen rbracket rparen rbracket lbracket (id . "else") lparen (id . "parse-peculiar-identifier") (id . "loc") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-peculiar-identifier") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\+ (id . "loc") rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") quote (id . "id") "+" rparen rparen rbracket lbracket lparen (id . "cons") #\- (id . "loc") rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") quote (id . "id") "-" rparen rparen rbracket lbracket lparen (id . "cons") #\. lparen (id . "cons") #\. lparen (id . "cons") #\. (id . "loc") rparen rparen rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") quote (id . "id") "..." rparen rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-boolean") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\# lparen (id . "cons") #\t (id . "loc") rparen rparen lparen (id . "cons") (id . "loc") #t rparen rbracket lbracket lparen (id . "cons") #\# lparen (id . "cons") #\f (id . "loc") rparen rparen lparen (id . "cons") (id . "loc") #f rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-number") (id . "loc") rparen quote (id . "fixme") rparen lparen (id . "define") lparen (id . "parse-character") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\# lparen (id . "cons") #\\ lparen (id . "cons") #\t lparen (id . "cons") #\a lparen (id . "cons") #\b (id . "loc") rparen rparen rparen rparen rparen lparen (id . "cons") (id . "loc") #\tab rparen rbracket lbracket lparen (id . "cons") #\# lparen (id . "cons") #\\ lparen (id . "cons") #\n lparen (id . "cons") #\e lparen (id . "cons") #\w lparen (id . "cons") #\l lparen (id . "cons") #\i lparen (id . "cons") #\n lparen (id . "cons") #\e (id . "loc") rparen rparen rparen rparen rparen rparen rparen rparen rparen lparen (id . "cons") (id . "loc") #\newline rparen rbracket lbracket lparen (id . "cons") #\# lparen (id . "cons") #\\ lparen (id . "cons") #\r lparen (id . "cons") #\e lparen (id . "cons") #\t lparen (id . "cons") #\u lparen (id . "cons") #\r lparen (id . "cons") #\n (id . "loc") rparen rparen rparen rparen rparen rparen rparen rparen lparen (id . "cons") (id . "loc") #\return rparen rbracket lbracket lparen (id . "cons") #\# lparen (id . "cons") #\\ lparen (id . "cons") (id . "c") (id . "loc") rparen rparen rparen lparen (id . "cons") (id . "loc") (id . "c") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-string") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\" (id . "loc") rparen lparen (id . "match") lparen (id . "parse-string-element*") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "cs") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\" (id . "loc") rparen lparen (id . "cons") (id . "loc") lparen (id . "list->string") (id . "cs") rparen rparen rbracket rparen rbracket rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-string-element*") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") #\" (id . "_") rparen lparen (id . "cons") (id . "loc") quote lparen rparen rparen rbracket lbracket lparen (id . "cons") (id . "c") (id . "loc") rparen lparen (id . "match") lparen (id . "parse-string-element*") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "cs") rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") (id . "c") (id . "cs") rparen rparen rbracket rparen rbracket rparen rparen lparen (id . "define") lparen (id . "special-initial?") (id . "c") rparen lparen (id . "memq") (id . "c") quote lparen #\! #\$ #\% #\& #\* #\/ #\: #\< #\= #\> #\? #\^ #\_ #\~ rparen rparen rparen lparen (id . "define") lparen (id . "letter?") (id . "c") rparen lparen (id . "memq") (id . "c") lparen (id . "string->list") "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" rparen rparen rparen lparen (id . "define") lparen (id . "first-initial?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "letter?") rparen (id . "_") rparen #t rbracket lbracket lparen (id . "cons") lparen (id . "?") (id . "special-initial?") rparen (id . "_") rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "parse-initial") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "letter?") (id . "l") rparen (id . "loc") rparen lparen (id . "cons") (id . "loc") (id . "l") rparen rbracket lbracket lparen (id . "cons") lparen (id . "?") (id . "special-initial?") (id . "s") rparen (id . "loc") rparen lparen (id . "cons") (id . "loc") (id . "s") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-subsequent*") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "?") (id . "first-subsequent?") rparen lparen (id . "match") lparen (id . "parse-subsequent") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "s") rparen lparen (id . "match") lparen (id . "parse-subsequent*") (id . "loc") rparen lbracket lparen (id . "cons") (id . "loc") (id . "ss") rparen lparen (id . "cons") (id . "loc") lparen (id . "cons") (id . "s") (id . "ss") rparen rparen rbracket rparen rbracket rparen rbracket lbracket (id . "_") lparen (id . "cons") (id . "loc") quote lparen rparen rparen rbracket rparen rparen lparen (id . "define") lparen (id . "first-subsequent?") (id . "loc") rparen lparen (id . "or") lparen (id . "first-initial?") (id . "loc") rparen lparen (id . "first-digit?") (id . "loc") rparen lparen (id . "first-special-subsequent?") (id . "loc") rparen rparen rparen lparen (id . "define") lparen (id . "parse-subsequent") (id . "loc") rparen lparen (id . "cond") lbracket lparen (id . "first-initial?") (id . "loc") rparen lparen (id . "parse-initial") (id . "loc") rparen rbracket lbracket lparen (id . "first-digit?") (id . "loc") rparen lparen (id . "parse-digit") (id . "loc") rparen rbracket lbracket lparen (id . "first-special-subsequent?") (id . "loc") rparen lparen (id . "parse-special-subsequent") (id . "loc") rparen rbracket lbracket (id . "else") lparen (id . "add1") #f rparen rbracket rparen rparen lparen (id . "define") lparen (id . "first-digit?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "digit?") rparen (id . "_") rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "first-special-subsequent?") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "special-subsequent?") rparen (id . "_") rparen #t rbracket lbracket (id . "_") #f rbracket rparen rparen lparen (id . "define") lparen (id . "special-subsequent?") (id . "c") rparen lparen (id . "memq") (id . "c") quote lparen #\+ #\- #\. #\@ #\# rparen rparen rparen lparen (id . "define") lparen (id . "parse-digit") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "digit?") (id . "d") rparen (id . "loc") rparen lparen (id . "cons") (id . "loc") (id . "d") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "parse-special-subsequent") (id . "loc") rparen lparen (id . "match") (id . "loc") lbracket lparen (id . "cons") lparen (id . "?") (id . "special-subsequent?") (id . "s") rparen (id . "loc") rparen lparen (id . "cons") (id . "loc") (id . "s") rparen rbracket rparen rparen lparen (id . "define") lparen (id . "digit?") (id . "c") rparen lparen (id . "memq") (id . "c") lparen (id . "string->list") "0123456789" rparen rparen rparen lparen (id . "parse-prog") lparen (id . "read-chars") rparen rparen rparen)
