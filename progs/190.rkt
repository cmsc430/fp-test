#lang racket
(cond
 ((- #t) (add1 #\㝢))
 ((let ((k0
         (if (let ((a0 #f)) #t)
           (let ((t2
                  (-
                   (cond
                    (#t (cond (else #\댁)))
                    (#t #t)
                    (-2 #t)
                    ((if #f 1 (if #t #f 2)) #f)
                    (#f (if #\䥝 #f -1))
                    (-2 #\记)
                    (#f #\U000E585D)
                    (4 #\㑕)
                    (#f #\U0008D082)
                    (-5 #\U000A4956)
                    (#t
                     (cond
                      ((if #f #\U000F3DA4 #t) #t)
                      ((if #t 5 #t) (if 13 -6 #\騺))
                      (#\ᵰ (- 8))
                      ((cond
                        (#\U00051711 #t)
                        (#\U000A3A8B 258)
                        (-2 #\U00048E06)
                        (#f -4)
                        (#f #f)
                        (else #f))
                       #f)
                      (#\U000802FA (boolean? #t))
                      (#\U0007E68A (cond (else 4)))
                      ((cond (#\룩 #f) (else #f)) (cond (else -1)))
                      (#t #\U000B17FB)
                      (#f #\鸁)
                      ((cond
                        (#\U000B644C #\퉅)
                        (3 #f)
                        (#f -7)
                        (#f -11)
                        (#f #f)
                        (-4 #f)
                        (3 -2)
                        (#t #\㒲)
                        (#t #\꧞)
                        (#f 2)
                        (#t 1)
                        (#t #t)
                        (else #t))
                       #t)
                      ((sub1 #t) (zero? #t))
                      (#f
                       (cond
                        (#\U000E4BF9 #\U00042C5D)
                        (#t 2)
                        (#f #f)
                        (4 #\〘)
                        (-8 #\亵)
                        (#t #t)
                        (#f -1)
                        (#\u9FCF #t)
                        (10 -1)
                        (-3 8)
                        (#t #t)
                        (1 -5)
                        (#f #t)
                        (else #\U0006D834)))
                      (#t (if #f 4 -1))
                      ((if -2 #t #f) 3)
                      (else #\邟)))
                    ((if #t (if #f #\餢 #f) #f)
                     (cond ((if #t #f #\瓶) #\⢜) (else -10)))
                    (else -1)))))
             #t)
           (char->integer #f))))
    (let ((o1 (let ((c2 #\U0001023F)) #f))) (if #t #\巘 #f)))
  -3)
 (0 (let ((j1 #f)) j1))
 (#\U000A7FAF #t)
 ((char? #f) #f)
 ((boolean?
   (cond
    ((let ((f0 2)) #t) (cond (else #t)))
    ((let ((a0 #t)) -7)
     (cond
      (1 3)
      (0 #f)
      (#\甑 -12)
      (0 #\U0002E608)
      (#t #f)
      (-2 #\U00084408)
      (#f #\ჸ)
      ((if (if (if #f (sub1 #\𨎖) (cond (#\𣍥 #t) (#f 1) (else 1)))
             (cond (else #\U000A5D5B))
             #\U000FC3E3)
         -1
         #f)
       #t)
      (#t #\U000E9EFC)
      (2 #f)
      (#f #\첒)
      (#f 3)
      (#f #f)
      (#\㜨 #\뢮)
      (2 #\U0005BD8D)
      (else 1)))
    (else -4)))
  #f)
 (else #\U000BF7C8))
