#lang racket
(cond
 ((let ((z0 #f)) 5) (abs #t))
 (#t #\U00063D18)
 ((let ((a2 #f)) a2) (char? (if #t #\몼 #t)))
 (2 (char? (cond (else -2))))
 (-2 #\죎)
 (20 #\愰)
 ((cond (else -5))
  (if (let ((d2 (if #\౭ #f #t))) #f)
    (cond (-1 (integer? #t)) (#f #f) (else #t))
    #f))
 (-1 (let ((p0 (if 16 #t (if #t #\𠐟 #\U000171B3)))) p0))
 ((if (cond
       (#f
        (cond
         ((if #t
            #t
            (cond
             (#\U000C3C28 #t)
             (#\𪈦 (if 1 -1 4))
             ((if #\U0008CD92 #f #f) -3)
             (#\駨 #t)
             ((char->integer #\㳕) (zero? #f))
             ((cond
               (5 #f)
               (#t #\癟)
               (-3 #t)
               (#\U000D3B07 #t)
               (#t #f)
               (#t #\U000BBEA7)
               (2 #t)
               (#f #f)
               (#\㋛ #t)
               (#t #t)
               (#\㼁 #f)
               (#f #t)
               (#\U0009E93D #\䅥)
               (#f 1)
               (#t #t)
               (else #t))
              #f)
             (1 -5)
             (#t
              (cond
               (#t #t)
               (#t #f)
               (#t #f)
               (#t #t)
               (#\Ⅱ 65)
               (-6 0)
               (#\U000E3811 6)
               (#\𧣋 #f)
               (0 #t)
               (#t #\嬉)
               (8 #\U00087878)
               (#t #\㠃)
               (#\U00019875 1)
               (#\U0006CCCD #f)
               (#t #t)
               (#\U0002F4C3 5)
               (#t 2)
               (else #f)))
             (#f #\褻)
             (#t (if #t #t #f))
             (else (integer->char #\錊))))
          (if (if #t (cond (else #\U0007303C)) #\U0007D344)
            3
            (add1 (if -5 #t #f))))
         ((if #\U00078362 (abs (if -1 #f 2)) 1) -4)
         (#f (char->integer #f))
         (8 #f)
         (else
          (cond
           ((boolean? #\䤿) -4)
           (-1 (if 1 (cond (-1 -3) (#t #t) (-2 3) (else #f)) 1))
           (else (add1 2))))))
       ((cond ((zero? #t) #t) (else #f)) -2)
       (else -2))
    (if #t #\U000617BD #\뾬)
    (char? -2))
  -9)
 (8 #\轇)
 (#\젗
  (if #\U000C1865
    (cond
     (#f #\U0009B736)
     (#f #\Ẓ)
     (#\餻 (char->integer #f))
     (#\U000F2F07 (let ((a1 #f)) #f))
     ((if (if #t 18 2) #t #t) #\U000C7AFE)
     (#t #t)
     (else (integer? #f)))
    (if #t
      (-
       (cond
        (#t (if (integer->char (cond (else #t))) #t (boolean? -5)))
        ((if #f (cond (#t #t) (else -1)) (add1 (add1 #f))) -1)
        (#\梔 #\U000B8B5F)
        ((if (if (cond
                  (#t -1)
                  (2 #\U000DC968)
                  (#\U00039890 #\U000DDB36)
                  (#f #\U0004DE63)
                  (#f 1)
                  (#\㮭 #t)
                  (else #f))
               #f
               (- #t))
           #f
           (cond (else #\㾼)))
         (cond
          (#f #\U000F1796)
          ((if #f (add1 #t) #t) (cond (2 #f) (else #\𤹋)))
          ((integer->char (integer? -8)) #\U000E18D6)
          ((cond
            (-18 (if 1 3 -19))
            (0 #\U00060897)
            (#\臇 (if #t #\U0009618D -4))
            (else 1))
           #f)
          (#t (add1 (if #\U001010CA 3 -2)))
          (#\Ã #\ꚍ)
          (2 -2)
          ((- #f) (abs #t))
          ((if #t #t (cond (#f #t) (else 3))) #t)
          ((cond
            (8 (add1 #t))
            (#t (add1 #t))
            (-2 (sub1 -2))
            (#t #f)
            (2 (cond (#t #\䒋) (-2 #f) (else #t)))
            (#f (sub1 -6))
            (#\U00043EFA #f)
            (else (- #f)))
           #f)
          (9
           (if (cond (#f #\U00034345) (5 #t) (#t -1) (else #\蕜))
             (cond (#t #f) (#f #t) (#\U00090495 #t) (else -1))
             (char->integer #t)))
          (#\侂 (zero? -1))
          ((cond
            ((if #\ⴗ #f #t) (cond (else #f)))
            ((if #\U0007F9E3 #f 2) (cond (else #f)))
            (2 #t)
            (1 (if #\𥢓 #f #\҃))
            ((if #f #t 32)
             (cond
              (#f #\조)
              (#t #t)
              (#\ᚼ #\U000F0549)
              (-33 #\U000712D9)
              (else #f)))
            ((cond (#f #\ꈤ) (#f 4) (#f -5) (#t #\矀) (else -9))
             (cond (#t #f) (#f -1) (1 #\U000A6ACE) (#f #\叮) (else 2)))
            (#f #\불)
            (#\U000AB03C #f)
            ((if #\U00034BB9 #t #\䠪) -3)
            (#f #t)
            ((cond (else #f))
             (cond (#t #f) (#t #f) (#f #t) (5 #f) (#\U000A2DC1 #t) (else 3)))
            (#\玑 #\u0DD5)
            (#f #t)
            ((if #t #f #\팟) -1)
            (else (integer->char 1)))
           (cond (#t #\U0005BD21) (else (if #f #t -1))))
          (else
           (cond
            (#t (char->integer #t))
            (#\U000E2B8A (integer? #t))
            (#t #t)
            (4 (cond (else #f)))
            (else (cond (else 12)))))))
        (else 1)))
      #t)))
 ((if #f #\U0009E864 #t) (let ((h0 #t)) -4))
 (#\U0009DB85 #\夣)
 ((cond (else -7)) (let ((j2 (cond (else (let ((s1 #t)) #\𠗐))))) #f))
 ((cond (#f #t) (#f #f) (else (let ((q0 -8)) (integer->char #\❨))))
  (cond
   (#\쐑 #\U0009B988)
   ((- (char? #t))
    (-
     (cond
      ((if (integer->char #t) #\U000E3BC7 #t)
       (if (integer->char #f) (if #\U000860E7 #t 3) (integer->char #\䉩)))
      (else (abs (if #\U000EC577 #f #t))))))
   (#t 2)
   ((if (let ((e2
               (cond
                (#t (if (zero? #t) (char->integer -4) #t))
                ((abs 3) (add1 #\U000D5BE2))
                ((if (if #f #f (char->integer #t))
                   (cond ((add1 #\넃) 5) (else (if #f #f #f)))
                   (cond
                    (#\U000988FB #\u088D)
                    (#f #\䜀)
                    ((if #f #t -4) #t)
                    (#t #f)
                    (else #f)))
                 #f)
                ((boolean? #\U0004594D) (if #f 20 #\U000CEACF))
                (else #f))))
          3)
      #f
      #\U000B1D8D)
    #t)
   ((boolean? (let ((m2 #t)) m2)) (zero? #\籱))
   (#\𣪆 #\U00032865)
   (#t
    (cond
     ((cond
       (#f 64)
       ((zero? (integer? (cond (#f #t) (#\벖 #t) (else #\曊)))) #t)
       (#t #\⪐)
       (else #t))
      #\U000F154B)
     ((cond (9 (zero? #f)) (-1 2) (#f #\㞟) (#t #\U000AB733) (else #t))
      (if -9 #t #f))
     (else #\U000A5341)))
   ((cond
     ((cond (else 3)) #f)
     ((char? #\މ) (sub1 #f))
     (#\U00106577 -8)
     (#f #f)
     ((cond
       (#t #\🎾)
       (-32 #t)
       ((char->integer #f) (if #t (sub1 -2) #\ᰨ))
       (else (cond (3 #\ҭ) (#f -1) (else #f))))
      (if (if (- -4) #f (if #t 1 #\U0010AE73)) (- #\U000F5EE7) #t))
     (#\U0004960F (- #t))
     (#f
      (cond
       (#\U000E9083 #\U000E6244)
       ((if (if #f #f #\U00056E8C) #f #f) #t)
       (#\U0003680F (abs (zero? #t)))
       (#\U000B24F9 (cond (#\𩃛 (cond (else -2))) (else #\U0005FA11)))
       (#t -2)
       ((if (cond
             (#t #\픧)
             (#t #t)
             (1 4)
             (#f #t)
             (4 #f)
             (#f -1)
             (#f #f)
             (-4 -4)
             (else 1))
          #t
          1)
        #\U000E476B)
       (#t #t)
       (#f (if #t #f #\鲦))
       ((if (boolean? #f) #f (if #\豹 -2 #f)) 0)
       (#f (if -2 #\u2E6C #t))
       (else #t)))
     ((- #f) (boolean? #\U00095CA3))
     (20
      (cond
       ((boolean? (integer? #\퍃)) #\륺)
       ((if #\U0003245B #f (sub1 #f)) #t)
       (#f -3)
       (#\U00014BCF (if #\U00065E14 #t 1))
       (#t (char->integer (if #f #\踢 #f)))
       (#f 1)
       ((if #f (if 1 #t 1) (if #t #f 2)) (if #t -2 #\㭁))
       (#t -7)
       (#f #t)
       (#t
        (integer->char
         (cond
          (#t #f)
          (#f #t)
          (#t #t)
          (-1 2)
          (#f #t)
          (#\U000E32B6 #t)
          (#f #\U00057683)
          (else #t))))
       ((cond
         (0 #\ꖱ)
         (#t #f)
         ((cond (#f #\U000E225A) (8 #f) (3 #\了) (#t #t) (else #t))
          (if #f #f #t))
         (#t #f)
         (#f #\U00083F8D)
         (else (char? #\U000587DF)))
        #t)
       ((cond
         (#t #\쌪)
         (-4 (if 1 #f #t))
         (#\⛰ #\U00108D43)
         ((if #f -1 0) (zero? #t))
         ((cond (#f #\U000A9008) (else #f)) #f)
         ((cond
           (#t #\䕅)
           (-6 #f)
           (-2 #f)
           (#f #f)
           (#t #\U0006B389)
           (#t #\ᅦ)
           (else -1))
          (sub1 #f))
         ((integer? #t) (add1 #t))
         (#t 2)
         ((if #t 2 #\罠) (if #f #f #f))
         (3 #f)
         (#f 2)
         (#\訿 (boolean? #f))
         (-4 (zero? #f))
         (else 4))
        (add1 #f))
       (#t (abs #t))
       ((boolean?
         (cond
          (#\쥶 #t)
          (#\온 #\팓)
          (#\畭 #\U000E5FE3)
          (1 1)
          (#\U00014942 #t)
          (#f 3)
          (-2 #\U0009FFEA)
          (else 11)))
        #t)
       (#\U000529A6 #f)
       (#\U00018335
        (cond
         (#f (cond (#f -1) (#\够 #f) (#\U00080D2E -6) (#t #f) (else #t)))
         (#t (if 4 #\U000EFBA5 #f))
         (-4 (cond (#\㇡ -1) (#\U001024F4 #t) (#f #t) (else #t)))
         (1 (zero? #\뱾))
         (#t (if #f 0 -2))
         (-1 -1)
         ((if #t #\㲙 2) #f)
         ((integer->char #f) (integer? #f))
         (-5 -2)
         ((cond (else #t)) (integer? #f))
         ((cond
           (#f #t)
           (#\U000D5CAA #t)
           (-1 0)
           (#f #f)
           (#f #t)
           (#\빿 #t)
           (#\𪵤 #t)
           (-1 #f)
           (#f #\U00036D87)
           (#f -18)
           (#t #f)
           (else #t))
          -2)
         ((if #t -2 #t) (cond (#t -2) (#\U000ADC3D 2) (#t -10) (else #t)))
         ((cond (else #\䑣)) (char->integer -1))
         ((char->integer #\㲩) (integer? -4))
         (-5 #t)
         ((if #f #f #\U000316FA) 513)
         (#f 2)
         (else (if #\U000397E4 #t -2))))
       (#f #\錒)
       ((cond (else #t)) (if 1 (- #f) #f))
       ((if (abs #\U00041B65) #f (if #f #\𤤑 #\饉)) #t)
       (else #f)))
     ((integer->char (cond (else (integer->char #f)))) 1)
     (#\U000C5C87 #t)
     (#f
      (if (add1 (abs #t)) 2 (if (if #\U00090ABF #f #f) (if #t #f -257) #\뚇)))
     (#\༶ (if #t (- #\U001003D3) 0))
     (1 8)
     ((integer? #t) #\U0010406B)
     ((if #t 0 #f) #f)
     (1 #\ዌ)
     (else #\U0009495E))
    (if (let ((f1 #t)) #\믩) (cond (#\U0005BCB1 #t) (else 0)) (if #t #f #\⊞)))
   (#f (if #\U000DA25E -4 #f))
   (#f #\㺚)
   (else #t)))
 (#f
  (if #\甓
    (cond
     (#f (zero? #t))
     (1 #t)
     ((boolean? #\鳤) #f)
     ((if #t #f #t) (- 3))
     ((if #f -2 #f) (if #\綪 #\䋂 #\U0009F25E))
     (#f 1)
     ((let ((g1 #\U000F95B6)) 4) (- 0))
     ((cond (#f #\U000C3777) (#t -1) (else #t)) #\㕄)
     (#f #t)
     ((cond
       (#\U000B5FC9
        (cond
         (#\珅
          (cond
           ((if #\U000EA031 -3 (if #t #\U00011884 #\虗))
            (cond
             (#\U00094801 #t)
             (#f
              (cond
               (-1 #\䱌)
               (4 #t)
               (3 #t)
               (#f #f)
               (#f #\䓉)
               (11 #f)
               (#f #t)
               (#f #t)
               (3 #f)
               (else #f)))
             (else (cond (else #\U0009189A)))))
           ((cond
             ((integer? 3) #t)
             ((zero? #f) (if -1 #f #t))
             (#f (if #t #\U000817C5 #\ύ))
             (else #\U0009BF58))
            #f)
           (#\㭬 #t)
           (#\𑋈 #f)
           (#f (boolean? -1))
           (3 #\司)
           ((if -2 1 #f) #t)
           ((cond (else #f)) #t)
           ((zero? #f) #\ᡚ)
           (#\U000B3DA5 #f)
           (#f (cond (else #f)))
           (#f (if #t -2 #f))
           (3 #f)
           (#f (zero? (if #t #t #f)))
           (#f #\U00046758)
           (else #t)))
         ((if -1 #t #\ᆨ) 1)
         (-2 5)
         (else 1)))
       (else #f))
      #\밦)
     (else -2))
    #\U000BE13F))
 ((cond
   (-2 (if (if #t #f #t) #\U00108DC1 (cond (else #f))))
   (#t (let ((n1 (char->integer #t))) #t))
   (#t (if (zero? 2) (let ((h2 #\U000C82C7)) #f) (boolean? 2)))
   ((let ((n2 -4)) (let ((b1 #t)) 4)) #t)
   (else #t))
  (let ((q1 (let ((g1 (if #\侂 #f 7))) g1))) (sub1 #f)))
 (#\偫 #f)
 (else (let ((v0 1)) (let ((b1 #\U000F21E6)) (if #t #t #f)))))
