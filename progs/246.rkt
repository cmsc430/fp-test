#lang racket
(cond
 ((cond
   ((cond
     ((char->integer
       (cond
        (#t 1)
        (#t #f)
        ((boolean? #t) #f)
        ((if 0 (sub1 #f) #f) #\됮)
        (#\U0006A8F1 #t)
        (1 (char->integer (integer->char #f)))
        ((if (add1 #f) #t #\紸) #\U000DAAAA)
        (else #t)))
      -2)
     (#\U000C7CF1 (if #t #t #\U00081078))
     (#\淛 #f)
     ((if #f
        1
        (if (if (cond
                 (1 #\튪)
                 (#f
                  (cond
                   (#f 4)
                   (#\uEBE0 #f)
                   (#\𣹽 2)
                   (#f 6)
                   (#t #\U000EC81F)
                   (#f 1)
                   (5 2)
                   (-4 #\U000CDDA4)
                   (#t -10)
                   (#f #f)
                   (2 -4)
                   (#f #f)
                   (4 #\䱢)
                   (#\U0007BAB7 2)
                   (#t 1)
                   (#f 0)
                   (#t #t)
                   (#t #\졂)
                   (#f -4)
                   (else #\U00072D82)))
                 ((cond (#f #t) (else #f)) #\졗)
                 (else #f))
              (if (if #\륍 3 -2) (if #f #\U000C1EF1 #f) #\U000FE4C2)
              (if (cond (#t #\絿) (0 #\U000C7D3C) (else #f))
                3
                (if #\U000B1431 -2 #f)))
          #f
          #\뻝))
      (let ((k1 #\U000F0688)) k1))
     ((- 2) #t)
     (-2 #t)
     (#t (integer? #f))
     (else (let ((c0 #t)) #t)))
    (let ((i1 (let ((h1 #\㐳)) #t))) (integer? #t)))
   (else -1))
  (cond
   ((if #\㥺 #t (integer->char #f)) #f)
   (#t
    (cond
     (#f #f)
     (#\摀 (cond (#\㭢 #\U000FB3E4) (#f #f) (#f 3) (else #f)))
     (#f (char->integer #f))
     (#t -2)
     (#t -1)
     (-2 (let ((x2 #\U00018CED)) x2))
     (else (if #f -1 #\U000D092C))))
   ((cond (else (if #f #\ꏌ #f))) #\뾼)
   (#t #f)
   ((let ((d0 (if #\駞 #t #f))) (if #t -1 d0)) (boolean? #f))
   (else (char->integer (abs -5)))))
 ((cond
   ((let ((f0 #f)) #\ݤ) #t)
   ((integer? -4) #t)
   (#\U000C8C0D #t)
   ((boolean? #\楇) -2)
   (#\U00091C0A #\䘈)
   (else
    (let ((d2
           (cond
            (5 2)
            (2
             (cond
              ((if #t (cond (else (sub1 #t))) #t) #\둒)
              (else #\U000BA29E)))
            (#f 1)
            ((- (if (char? (cond (else -3))) 3 (if 16 #f (abs -8))))
             #\U000685CA)
            (#\㫚 #f)
            (#t #\瞱)
            (#f -2)
            (#f -2)
            (#\U000437D0 -2)
            ((boolean? 1) #t)
            (else #f))))
      #f)))
  (zero? #t))
 ((let ((s0 #t)) 1) (if -1 (abs #\汥) #f))
 (#f (if #f (cond (else (char->integer -1))) #\ꉁ))
 ((if (if #\U000C93B0 (boolean? #f) #t)
    (cond
     ((boolean? (zero? #t)) -1)
     (#\썙 (let ((q1 #t)) #f))
     (else (if 1 #\U00106FD4 #f)))
    (let ((d2 #\U0010E80F)) (if -2 #t 7)))
  -2)
 ((let ((l1
         (cond
          (-1 #f)
          (3 8)
          (#f #f)
          (#t #t)
          ((if (if #\뿷 #\Ḧ (cond (else #\u13F7)))
             -2
             (if #t #t (if #\U0006A91C #\ຶ 3)))
           #\U000E47F2)
          (#t #\ጜ)
          (#t (if (char->integer #f) (if (if 1 #t -4) (if #f #f 2) #f) #\㤿))
          (else (char->integer #\U000D774F)))))
    (cond (else (let ((r0 #t)) #\ͭ))))
  4)
 (3 #t)
 (#t
  (if #t
    (cond
     (#f
      (cond
       ((cond (#t #t) (else #t)) (add1 #f))
       (#t 8)
       (#t
        (cond
         ((cond (16 #f) (else #t)) (add1 #t))
         (#f #\Ǭ)
         ((cond (2 #t) (#t #f) (else #\U00056C1A)) #f)
         ((boolean? #t) #f)
         (#t (char? #t))
         (else (if #f 3 3))))
       ((if (if -1 #t 2) -1 #t)
        (if (cond (#f #f) (else 5)) (abs #f) (cond (#t -1) (else #f))))
       (else #t)))
     (#\짃 #\U0008B862)
     ((cond (#t #\U00073BAC) (else -2))
      (if -2
        (cond
         (-2 (if #\縝 #\쐕 0))
         ((if 1 -18 #\U00082DC4) #\U00035386)
         ((cond (else #\U0004E683)) #f)
         ((if #f 2 #f) (if #t #t #f))
         ((boolean? #\䠄) #t)
         ((cond (else #\눀)) (cond (#t #t) (#f #t) (#t #t) (#t 1) (else #f)))
         (#\讚 (char->integer #f))
         ((cond (#\㼚 1) (#f 1) (else #t)) (if #f 3 #\U000DEA19))
         (5 #f)
         (#f (if #t 2 -8))
         ((char? -3) #f)
         (#t (char? #f))
         (else #f))
        #t))
     (#t -2)
     ((integer->char (if #t (if #\U00064EC7 #t #t) (integer? #f))) -1)
     (#\䁸 #t)
     ((cond
       (#t (- #\𪟴))
       (#f 4)
       (#\䝄
        (if (if -1 #f -12)
          (cond
           (#t #\ꦡ)
           (#f #f)
           (#t #f)
           (#f #t)
           (#\餓 #\㦛)
           (#\U000C34DE #f)
           (else #t))
          (cond
           (#\U0006380A #\ꦆ)
           (#f 8)
           (#f #f)
           (#t #t)
           (-1 #t)
           (4 3)
           (else #\Ѫ))))
       (#f -258)
       (else #t))
      (integer->char #f))
     ((if #f (cond (-2 #f) (-1 #f) (#t #f) (#f #\U000F1E62) (else 2)) #f) #t)
     ((if #f (integer->char #f) #t) #f)
     (#t (sub1 #t))
     (else (zero? 16)))
    (let ((w0 (cond (2 #t) (else #\🎠)))) (let ((v2 w0)) w0))))
 ((if #f -2 8) (let ((l0 (char->integer #t))) #\U000AC24B))
 ((char? #\്) (if (if #f #\U000B9189 (if -2 #f 1)) #f (let ((p2 #t)) p2)))
 ((let ((a0 -7))
    (cond
     ((let ((g1 0)) #t) a0)
     (-2 #\춄)
     (a0 (let ((c2 #\廤)) c2))
     (#t (if #t #t #\U00108DF8))
     (0 2)
     (#f #f)
     (#\U00037814 (char->integer #\U00102D1A))
     (#\㞩 (cond (#t #t) (a0 #f) (a0 #t) (a0 #\U000D3EAB) (#t a0) (else a0)))
     ((if #\䍬 #t a0) (if #t #f 1))
     (a0 (sub1 #t))
     ((integer->char 16) #f)
     (2 #t)
     ((if #f #t #\U0009B605) #f)
     ((- #\ꈢ) #\嚖)
     (#\U00072E1A (cond (else a0)))
     ((let ((k2 a0)) #t) (if #f #t -2))
     ((if a0 #t a0) (if #t -2 #\𫙘))
     (#f #t)
     (#\U000F5562 #f)
     (else (cond (#t a0) (else #\U0007C3E8)))))
  #\U00035566)
 (#f (if #t 1 #\U00073522))
 ((abs #\U0010BA66) #f)
 (else
  (if (let ((s0 (let ((c1 -3)) c1))) (cond (else #\U00105AF6))) (add1 #f) #t)))
