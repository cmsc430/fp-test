#lang racket
(if (sub1 (let ((x0 (let ((p2 1)) #f))) x0))
  (if (integer->char
       (if (cond (#t -2) (#t #\U00017637) (3 -1) (else #t)) #t #\U0003A105))
    (cond
     (#t (if (if #\U00078F10 5 -3) #f 8))
     (17
      (cond
       ((integer? #\U0001E0E6)
        (cond (#\ⶐ #f) (#f #\椎) (#f #\U000782A0) (else #t)))
       (#t (if #t #\三 3))
       (#f #f)
       (#t -8)
       (#t #t)
       (2 -2)
       (-8 #f)
       (else (if #\敔 #t -2))))
     ((char->integer (integer->char #f))
      (cond
       ((integer->char #f) #\驽)
       (#t (char->integer -5))
       (#f -1)
       ((sub1 #t) (if 6 2 #f))
       (#t
        (cond
         (#f #\쎙)
         (#\U000ACEE0 #f)
         (#t #t)
         (#\潪 #\U0008B0E2)
         (-1 -1)
         (64 #t)
         (#t #\U000E37CA)
         (#\U000DA0BB #\嵾)
         (0 -5)
         (#f -2)
         (else #f)))
       ((if -1 #t #f) 0)
       (#t #t)
       ((if 6 -1 #\䗊) (add1 #\U000ACC8F))
       (#f (cond (#t #\U000EC0D0) (#f #t) (else -1)))
       ((cond (else #f)) 5)
       ((integer? #f) (if #t #f #t))
       (else (if #f #\邤 #\U000E91AC))))
     ((cond
       (#f (cond (-2 #t) (#\𡧑 #\U000B1112) (else #t)))
       ((cond (#f #\嫃) (else #\斅)) #t)
       (18 #f)
       (else #f))
      #t)
     ((if (integer? #\U000EF079) (cond (-1 #f) (else #t)) #t) #t)
     (#t #\䕐)
     (#t
      (if (cond
           (#f #t)
           (#\U000505DE -1)
           (#t #t)
           (#f #f)
           (#f #t)
           (-1 #\𣕞)
           (0 #t)
           (9 #t)
           (#\U000F0D23 #\U000FF9E5)
           (#f #t)
           (#\Ԧ #\䄈)
           (#\𡛏 -1)
           (#\㼮 #\䒌)
           (else 1))
        (abs #t)
        (integer? -5)))
     (1 (sub1 (if -1 #f #f)))
     ((if #t (cond (else #t)) (integer? #f)) #f)
     ((if (char? #t) (if -256 #\U000E5772 #\럙) -2) 3)
     (#t (integer? (sub1 2)))
     ((cond (#\± (integer->char #f)) (else #f)) #t)
     (#f #t)
     (#f #\u001D)
     (#f (abs (cond (#f 0) (#\㟷 #f) (2 7) (1 #\u0A0C) (else #t))))
     ((cond
       (#f 2)
       ((cond (#f 1) (else #\셝)) (integer->char #\U0002D18B))
       (#\鹼 0)
       (else (- #\U0008683F)))
      (add1 -2))
     ((cond
       (#\똩 (char->integer #f))
       ((if -3 #t #f) (cond (#t 2) (else #\U00099FC6)))
       (1 (if #\U000502EE #t #f))
       ((integer? #t) 0)
       (0 (if #\査 #f #t))
       ((cond (#\둀 #\U000CE8AD) (-1 11) (#\⮫ #t) (else #f)) -1)
       (3 (char? #f))
       ((if #f #\塾 #f) #f)
       (#f #f)
       (#f #\붓)
       (else (cond (-2 -3) (-4 #t) (else #f))))
      #\U000F2412)
     (else #f))
    (cond
     (3
      (cond
       (#f (cond (#f -7) (#\錵 #f) (#t #t) (#f #t) (else 4)))
       ((sub1 #f) -18)
       (#f #f)
       ((cond (else -3)) #t)
       ((char->integer #\臀) #t)
       (#f
        (cond
         (#t -2)
         (-2 1)
         (#\䁥 #f)
         (#t #f)
         (#\㐀 #\횷)
         (#f #f)
         (#\U000BE5EF #\U000702EA)
         (else #f)))
       (#\齗 #f)
       (#f #f)
       (else (cond (else -1)))))
     (#t
      (cond
       ((if #t #t #f) (char->integer #f))
       (-5 #t)
       (-3 (cond (else #f)))
       ((cond (-8 #f) (#t 1) (else #f)) #f)
       ((cond (#\U00078D26 #t) (#\U000CD0AC #t) (else -2)) (- #f))
       (-2 #t)
       ((if -4 #f #\톤) -16)
       (#\긻 #\죪)
       (else #\U00100CEB)))
     (#f -4)
     (else #f)))
  (zero? 4))
