#lang racket
(cond
 (#f #f)
 ((if #\U00091B30
    (cond (else (abs 4)))
    (cond
     (#f #f)
     (#t (if -2 #t #f))
     ((if #f #t #f) (char? #t))
     ((cond (else #f)) (if #f #t #t))
     (2
      (cond
       (#f #t)
       (#f #\U000ADF8F)
       (#\U00046BCF -2)
       (#t #f)
       (#t #t)
       (else -2)))
     (#\U000A22CB #t)
     (else (cond (else #t)))))
  (cond
   (#\U000BE7D1 4)
   ((if -1 (cond (else #\㇆)) #t) 2)
   ((if #f #f (cond (#\U00092D5C #\ꛌ) (#\榞 4) (-33 #\𤰖) (else #f))) #\媸)
   (#t -4)
   (-5 #f)
   (#f #f)
   ((- (if #f -2 #t)) #t)
   (#t
    (if (zero? #\u001C)
      (cond
       (#\U000B235E #\龀)
       (#\퇌 #f)
       (#f #f)
       (#\U000419B3 #f)
       (#\旲 3)
       (#\U000FDCE9 #t)
       (else #f))
      (sub1 #f)))
   (else (if #\U00109786 (char->integer #f) #f))))
 ((if (- 3)
    (cond
     (#t 3)
     (#f (if #f #\匛 #\U0003FB97))
     (#f 2)
     ((cond (#t -45) (else #f)) #\U000EDCEB)
     ((if #\Ⰺ -1 2) -4)
     (-1 #f)
     (4 (sub1 #\U000A2381))
     (else #t))
    #f)
  (if #\㇑ (integer->char (- #t)) #\U0007D685))
 ((abs (cond (-2 (zero? #f)) (else (integer->char -5)))) #f)
 ((if #t (zero? 4) #\ꄋ) #f)
 ((cond (else (sub1 (zero? #t)))) (char->integer (cond (else -4))))
 ((if #f #\⒊ #t) 4)
 (#t (cond (else #\u2E5B)))
 (#f -1)
 (else #t))
