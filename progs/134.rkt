#lang racket
(cond
 ((sub1 (let ((k0 -5)) -1))
  (if (add1
       (cond
        (4 #\랒)
        (#f #\U000CEF9D)
        (-2 #\㋭)
        ((add1
          (cond
           (#t #\㕋)
           (-9 #f)
           (#t (integer? (if 1 #t #\U000ED3F0)))
           ((if (cond (#f #f) (else #f)) (if #f #f #\腁) #\蔄)
            (cond ((boolean? #t) (integer? #\U000A34EA)) (6 #f) (else #\⇜)))
           (#f 1)
           (#t #t)
           ((if 1 (char? #t) #f) #\U000F4039)
           (#t (if (if #t #t #f) -1 3))
           ((cond
             (#\䝗 (if #t #t 9))
             (#\枔 -33)
             ((abs #f) (if #\U0007E74D 3 -1))
             (else (char->integer #\盱)))
            #\U000E5596)
           (else #f)))
         #\U00042214)
        (#f
         (cond
          ((if (cond
                ((- #f) (cond (else #t)))
                (#\U00075DB0 #f)
                (else (cond (-1 9) (else #t))))
             (add1 #t)
             #\裟)
           #t)
          ((if 1 (cond (else (cond (else #f)))) (if #t #t 5)) #\좳)
          (#t 6)
          (#t 1)
          (#f #\墎)
          (#t
           (cond
            ((zero?
              (cond
               (#f #f)
               (#f #\U000371E7)
               (#f #t)
               (#\꺯 #f)
               (-3 #\U000BDBAE)
               (#f -2)
               (-16 -3)
               (#f #\䌄)
               (#t #\𞢹)
               (#\U000A1B02 #t)
               (#t 3)
               (#\U0004F845 #f)
               (else #\U000F601C)))
             #t)
            (#\U000DEA9F
             (if #t
               #\U000F61D6
               (cond
                (3 #f)
                (2 -7)
                (-1 #\鴬)
                (#\U0007024B #\U0009B599)
                (#t #f)
                (#f #\U000579CE)
                (#\퓀 2)
                (#f 3)
                (0 #t)
                (#t -2)
                (#t #\ம)
                (#t -2)
                (#\U000D12DB #f)
                (#t #f)
                (#t -4)
                (#\U0001C669 #f)
                (else #\U000C03BF))))
            ((cond (#\U0002E183 (if -5 #f #t)) (else #t))
             (cond
              ((if #\댭 2 #f) #\䔙)
              ((if #f #f 5)
               (cond
                (#\韁 #f)
                (#t -2)
                (2 #\𤳱)
                (#\㧷 3)
                (#f #f)
                (#f #\㚶)
                (-10 -1)
                (#f #f)
                (else #\U0009EDD2)))
              (#t 3)
              ((if #t 0 2) -1)
              (else 5)))
            ((add1
              (cond
               (#\푶 #\𧽏)
               (#f #\U0010D466)
               (#f #\独)
               (#t #f)
               (#t #t)
               (#t 2)
               (-2 #t)
               (else #t)))
             2)
            (else (- -2))))
          (1
           (cond
            (#t (if (add1 #\ထ) 4 (abs #t)))
            ((if #t #f 1)
             (cond
              ((if #\U0005B61C 4 #\砯) #t)
              ((cond (else #f)) -2)
              (else (cond (#t #t) (-36 #\U0005295B) (#\꼂 #f) (else -6)))))
            (-1 #t)
            (#f #t)
            (#f #t)
            (#f -2)
            (#f (abs #t))
            ((char? (cond (1 #\蟉) (else 3))) #f)
            ((zero? (if #t 0 #f)) 2)
            (#\饶 4)
            (#f #\U00034510)
            (#t -17)
            (1 (if #t -1 (zero? #\U00096E08)))
            (else (integer->char #\唙))))
          (else #\U000CBFB5)))
        (#f #\U0008B254)
        (#f #\U0009692D)
        (#f #t)
        (#t #\鱆)
        (#t #t)
        (#t #t)
        (#f -4)
        (else -1)))
    (cond (else #f))
    (add1 (let ((x2 #\遊)) #t))))
 (#t #t)
 ((let ((s0
         (cond
          (#\U000C4034 (cond (#\⁛ #f) (else #t)))
          (#\U0006F47E (let ((y1 6)) #f))
          ((sub1 #f) -4)
          (#t #f)
          ((cond (else #\U00057D10)) 2)
          (#f
           (cond
            (#f #f)
            (2 #f)
            ((if (- (if #\淘 #\U000BED6A #\U0002D122)) (char->integer -33) #\ꦝ)
             #f)
            (#t #\U000DBF88)
            (#\U000E3A22 #\頨)
            (2 #t)
            (#f -4)
            (#t 3)
            (#f -8)
            (else #f)))
          ((integer->char #t) (cond (#\༡ #t) (else 2)))
          (else #t))))
    #t)
  #t)
 ((if (integer? (if #f -16 2)) -2 -1) #t)
 ((abs #t) -2)
 ((zero? (if #f #f #f)) #f)
 (-1 #f)
 ((if 4 -5 (if #t -4 (boolean? 1))) (if (let ((g1 9)) 1) (if 17 -8 #t) 1))
 ((- #f) 4)
 (else
  (cond
   (#f #f)
   ((sub1 #\羈) #f)
   (#\U0002C2A8 (let ((k1 (char? -1))) #f))
   ((if (if #f
          #\視
          (if (cond (else #\ۗ))
            (if #t (if #\U000173B9 -2 #\U00089529) (boolean? #f))
            (cond
             (-1 #f)
             ((cond (else #\U000BC3CC)) #\U00079916)
             ((char? -1) (if -3 #\᪃ #f))
             (#t (sub1 #\U000E7392))
             (else #t))))
      -4
      #f)
    (let ((t1 (boolean? #\䣲))) (let ((y0 #t)) #t)))
   (#f -3)
   ((integer? #t) #\韋)
   ((cond (#t (if #f #\엏 #\U00084D7A)) (else (if #f #f #t))) #\捽)
   ((char?
     (cond
      ((cond
        (-2 #\儆)
        (-5 -1)
        (#\此 (boolean? #\U000BD7A7))
        (#\ⴜ
         (cond
          (#t (zero? #\幑))
          ((cond
            ((if -4 #f -9) #t)
            (#f (char->integer #\溲))
            (#f (if #\U000EDB8C 15 #\U00089DD2))
            ((if -2 #\U000BEF76 4) #t)
            (else #t))
           (cond (else #\U000C6E1F)))
          ((cond (#t #f) ((cond (#f #t) (else #t)) (if -1 #\賀 #\㿸)) (else #\ህ))
           16)
          (else #\싻)))
        (else #t))
       2)
      (#\㣯 #\䤉)
      (#\U000FDAE8 #f)
      (#t #t)
      (-17 #\𫞗)
      (#\U0001F6F7 (cond (else (- #f))))
      (#\U00032983 #t)
      (else #f)))
    (if #t -5 (cond (1 #t) (#f #t) (else #t))))
   (else -2))))
