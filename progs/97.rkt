#lang racket
(cond
 ((cond
   ((cond
     ((if #t #t 0)
      (cond
       (#f #\U000E82D4)
       (#\U0003139E 1)
       (#f #f)
       (#\㘝 2)
       ((abs #\𥳳) #t)
       (4 #\䑙)
       (else #t)))
     ((cond (#f #t) ((integer? (boolean? (if #f -2 #\㧶))) #f) (else #t)) #f)
     ((if #\U0004D9CD (if #t #f #\罈) 3)
      (cond (#\蓧 #f) (3 #f) (#\U00082DFB #f) (else 0)))
     (else (cond (else (zero? (cond (#\ꚁ (if 1 #t #f)) (else 1)))))))
    (if (if #t
          (zero? #\琖)
          (if (if (cond (else 2))
                (cond (else (cond (#f #f) (#\䎨 #f) (else #f))))
                #f)
            #\U00055B30
            (cond
             (#\U0006643B (cond (else (if #f #t #f))))
             (1 (if -1 (char->integer -4) #f))
             ((cond
               ((- #t) (sub1 -3))
               ((boolean? #f) -8)
               (#t -1)
               ((if #f #\U00014930 2) #\靕)
               ((if -6 #\U0002FB09 #\ൠ) #f)
               ((if #\U0008070F #\璪 -3) (zero? #\U00053CD4))
               (#f #\U000DBD76)
               (-1 #\蕒)
               (else (if -3 #f 2)))
              #\㦩)
             ((if 1 (if #f 1 #f) (abs #t))
              (integer->char (cond (-5 -5) (else -2))))
             ((cond
               (3 -8)
               ((cond (else #t)) (if #t #t #t))
               ((cond (else #f)) (if #t #f -4))
               (#f (char->integer #t))
               ((cond (#\燧 #t) (else #\拫)) (sub1 #f))
               (#f #t)
               ((boolean? #t) #t)
               ((cond (#\U000FC35D -1) (else #t)) #\젔)
               ((zero? #t) -8)
               (#f 2)
               (#\易 (if #f #f #t))
               (#t #t)
               (else -1))
              (abs 3))
             ((char->integer #t) #\짲)
             ((if (if #t #f #\U0004530D) #t (if -2 #t #\U000476F5)) #t)
             (else #\U00015DB0))))
      -4
      -9))
   (#t 2)
   (#f (let ((f1 (if #t #\잰 (if #\U00011D37 (boolean? #\U000998E4) #\鄖)))) 2))
   (#\씎
    (if (cond (else #t))
      #\拪
      (cond
       (#\U0007CC24 #f)
       (#f #f)
       ((cond (#t (cond (else #t))) (#\U0006008D #t) (else 5)) #f)
       (#f
        (if (cond
             (-3 -4)
             ((char? 1) 1)
             (#\稨 (if (if -1 #t 4) (cond (-2 5) (else #t)) #\ཐ))
             (else (integer->char (if #\𩌝 #\U0006AA3E #f))))
          #t
          1))
       (#\U000AD813 #t)
       (#\ଟ #\ꨆ)
       (#\U000FE01B #f)
       (#f 4)
       (#t 4)
       (else -9))))
   (#\U000C481F #f)
   (#f (let ((e0 #f)) (- #\U000CD51F)))
   ((cond ((add1 1) #t) (else #t))
    (if (cond
         (-1 #f)
         (#f #f)
         (#\u0FF3 0)
         ((cond (else -8)) 4)
         (1 #f)
         (#f #t)
         (else #t))
      (cond (#\칕 #t) (5 #t) (else 1))
      #\본))
   (#f 3)
   (else -2))
  #t)
 (#t
  (if (integer->char (if #t #\ϓ #t))
    (if (if #t #f #\U0005D27C) (if #\U0008565B #\u08CC #\U00017BAA) 4)
    (if #\ક #f #\骷)))
 ((let ((b1
         (cond
          (2 (if #f #\螓 3))
          ((let ((b1 #t)) #\U00070DA6) #f)
          (else (let ((b0 #t)) -4)))))
    b1)
  #t)
 (#f #\⽎)
 (else #f))
